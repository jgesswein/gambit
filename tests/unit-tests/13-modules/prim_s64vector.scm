(include "#.scm")

(check-same-behavior ("" "##" "~~lib/gambit/prim/s64vector#.scm")

;; Gambit

(append-s64vectors '(#s64(1) #s64(2) #s64(3)))
(list->s64vector '(1 2 3))
(s64vector-length (make-s64vector 5)) (make-s64vector 5 9)
(subs64vector '#s64(1 2 3 4 5) 1 3)

(let ((x (s64vector 1 2 3 4 5))) (subs64vector-fill! x 1 3 99) x)
(let ((x (s64vector 1 2 3 4)) (y (s64vector 6 7 8 9 0))) (subs64vector-move! x 2 3 y 1) y)
(s64vector) (s64vector 1) (s64vector 1 2) (s64vector 1 2 3)
(s64vector->list '#s64(1 2 3 4 5))
(s64vector-append) (s64vector-append '#s64(1)) (s64vector-append '#s64(1) '#s64(2)) (s64vector-append '#s64(1) '#s64(2) '#s64(3))
(s64vector-copy '#s64(1 2 3 4 5))
(s64vector-copy '#s64(1 2 3 4 5) 1)
(s64vector-copy '#s64(1 2 3 4 5) 1 3)
(let ((x (s64vector 1 2 3 4)) (y (s64vector 6 7 8 9 0))) (s64vector-copy! y 1 x) y)
(let ((x (s64vector 1 2 3 4)) (y (s64vector 6 7 8 9 0))) (s64vector-copy! y 1 x 2) y)
(let ((x (s64vector 1 2 3 4)) (y (s64vector 6 7 8 9 0))) (s64vector-copy! y 1 x 2 3) y)
(let ((x (s64vector 1 2 3 4 5))) (s64vector-fill! x 99) x)
(let ((x (s64vector 1 2 3 4 5))) (s64vector-fill! x 99 1) x)
(let ((x (s64vector 1 2 3 4 5))) (s64vector-fill! x 99 1 3) x)
(s64vector-length '#s64(1 2 3 4 5))
(s64vector-ref '#s64(1 2 3 4 5) 2)
(s64vector-set '#s64(1 2 3 4 5) 2 99)
(let ((x (s64vector 1 2 3 4 5))) (s64vector-set! x 2 99) x)
(let ((x (s64vector 1 2 3 4 5))) (s64vector-shrink! x 3) x)
(s64vector? '#s64(1 2 3)) (s64vector? 123)
)
